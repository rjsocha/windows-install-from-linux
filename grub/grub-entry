#!/bin/bash
set -e

prefix="/usr"
exec_prefix="/usr"
datarootdir="/usr/share"
ubuntu_recovery="0"
quiet_boot="0"
quick_boot="0"
gfxpayload_dynamic="0"
vt_handoff="0"

. "${pkgdatadir}/grub-mkconfig_lib"

if ( [ "x${GRUB_DEVICE_UUID}" = "x" ] && [ "x${GRUB_DEVICE_PARTUUID}" = "x" ] ) \
    || ( [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ] \
	&& [ "x${GRUB_DISABLE_LINUX_PARTUUID}" = "xtrue" ] ) \
    || ( ! test -e "/dev/disk/by-uuid/${GRUB_DEVICE_UUID}" \
	&& ! test -e "/dev/disk/by-partuuid/${GRUB_DEVICE_PARTUUID}" ) \
    || ( test -e "${GRUB_DEVICE}" && uses_abstraction "${GRUB_DEVICE}" lvm ); then
  LINUX_ROOT_DEVICE=${GRUB_DEVICE}
elif [ "x${GRUB_DEVICE_UUID}" = "x" ] \
    || [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ]; then
  LINUX_ROOT_DEVICE=PARTUUID=${GRUB_DEVICE_PARTUUID}
else
  LINUX_ROOT_DEVICE=UUID=${GRUB_DEVICE_UUID}
fi

case x"$GRUB_FS" in
    xbtrfs)
	rootsubvol="`make_system_path_relative_to_its_root /`"
	rootsubvol="${rootsubvol#/}"
	if [ "x${rootsubvol}" != x ]; then
	    GRUB_CMDLINE_LINUX="rootflags=subvol=${rootsubvol} ${GRUB_CMDLINE_LINUX}"
	fi;;
    xzfs)
	rpool=`${grub_probe} --device ${GRUB_DEVICE} --target=fs_label 2>/dev/null || true`
	bootfs="`make_system_path_relative_to_its_root / | sed -e "s,@$,,"`"
	LINUX_ROOT_DEVICE="ZFS=${rpool}${bootfs%/}"
	;;
esac

indentation="  "
boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"

FW=BIOS
if [ -d /sys/firmware/efi ]; then
  FW=UEFI
  export FORCE_NETBOOT=on
fi

if [ ! -f /boot/ipxe-chain.efi ]; then
  printf -- "Downloading ipxe-chain.efi ...\n" >&2
  curl -o /boot/ipxe-chain.efi -# -f http://http.install.socha.it/windows/boot/ipxe-chain.efi
fi
if [ ! -f /boot/ipxe-chain.bios ]; then
  printf -- "Downloading ipxe-chain.bios ...\n" >&2
  curl -o /boot/ipxe-chain.bios -# -f http://http.install.socha.it/windows/boot/ipxe-chain.bios
fi

bootloader=/boot/ipxe-chain.bios

if [[ -z ${FORCE_NETBOOT-} ]]; then
  if [[ ${FW} == "BIOS" ]]; then
    mkdir -p /wyga
    if [[ ! -f /wyga/wimboot ]]; then
      printf -- "Downloading wimboot ...\n" >&2
      curl -o /wyga/wimboot -# -f http://http.install.socha.it/windows/wimboot
    fi
    if [[ ! -f /wyga/winpeshl.ini ]]; then
      printf -- "Downloading winpeshl.ini ...\n" >&2
      curl -o /wyga/winpeshl.ini -# -f http://http.install.socha.it/windows/wyga/winpeshl.ini
    fi
    if [[ ! -f /wyga/wyga.cmd ]]; then
      printf -- "Downloading wyga.cmd ...\n" >&2
      curl -o /wyga/wyga.cmd -# -f http://http.install.socha.it/windows/wyga/wyga.cmd
    fi
    if [[ ! -f /wyga/wyga.cab ]]; then
      printf -- "Downloading wyga.cab ...\n" >&2
      curl -o /wyga/wyga.cab -# -f http://http.install.socha.it/windows/wyga/wyga.cab
    fi
    if [[ ! -f /wyga/bcd ]]; then
      printf -- "Downloading BCD ...\n" >&2
      curl -o /wyga/bcd -# -f http://http.install.socha.it/windows/2025/bcd
    fi
    if [[ ! -f /wyga/boot.sdi ]]; then
      printf -- "Downloading boot.sdi ...\n" >&2
      curl -o /wyga/boot.sdi -# -f http://http.install.socha.it/windows/2025/boot.sdi
    fi
    if [[ ! -f /wyga/boot.wim ]]; then
      printf -- "Downloading boot.wim ...\n" >&2
      curl -o /wyga/boot.wim -# -f http://http.install.socha.it/windows/2025/boot.wim
    fi
  fi
fi

basename=`basename $bootloader`
dirname=`dirname $bootloader`
rel_dirname=`make_system_path_relative_to_its_root $dirname`

printf -- "Adding windows-install entry ...\n" >&2
printf -- "menuentry 'windows-install' {\n"
sed "s/^/$indentation/" << EOF
# GRUB_DEVICE=${GRUB_DEVICE-NONE}
# GRUB_DEVICE_BOOT=${GRUB_DEVICE_BOOT-NONE}
# LINUX_ROOT_DEVICE=${LINUX_ROOT_DEVICE-NONE}
EOF

if [[ -n ${FORCE_NETBOOT-} ]]; then
  if [ x$dirname = x/ ]; then
    prepare_boot="$(prepare_grub_to_access_device ${GRUB_DEVICE})"
    printf '%s\n' "# ROOT" | sed "s/^/$indentation/"
  else
    prepare_boot="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT})"
    printf '%s\n' "# BOOT" | sed "s/^/$indentation/"
  fi
  printf '%s\n' "${prepare_boot}" | sed "s/^/$indentation/"
sed "s/^/$indentation/" << EOF
if [ "\$grub_platform" = "efi" ]; then
  chainloader ${rel_dirname}/ipxe-chain.efi
else
  linux16 ${rel_dirname}/ipxe-chain.bios
fi
EOF
else
  prepare_boot="$(prepare_grub_to_access_device ${GRUB_DEVICE})"
  printf '%s\n' "# ROOT" | sed "s/^/$indentation/"
  printf '%s\n' "${prepare_boot}" | sed "s/^/$indentation/"
sed "s/^/$indentation/" << EOF
linux16 /wyga/wimboot quiet
initrd16 newc:winpeshl.ini:/wyga/winpeshl.ini newc:wyga.cmd:/wyga/wyga.cmd newc:wyga.cab:/wyga/wyga.cab newc:bcd:/wyga/bcd newc:boot.sdi:/wyga/boot.sdi newc:boot.wim:/wyga/boot.wim
EOF
fi
printf -- "}\n"
